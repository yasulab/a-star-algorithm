Author: Yohei YASUKAWA
Date: 01/31/2011
Mail: yasulab@gmail.com

COMP 343 Hwk2 - A* Algorithm
============================

Description
-----------
This program implements the idea of A* algorithm
with following three heuristic functions:

- 1. Zero heuristic
- 2. Manhattan heuristic
- 3. Euclidean heuristic

In Zero heuristic, each space in a maze is equally cost,
so the next-exploring space totally depends on how spaces
are put into the queue. In this program, the spaces are
put into the queue in the way from top left to bottom right.
For example, if the program seeks the 3x3 map, it should put
as follows:

1 2 3
4 5 6
7 8 9


Manhattan heuristic calculates costs with Manhattan distance.
For example, in the following state, where the '*' is goal,
'x' is current location, and 'o' is the start, the cost
should be 4.

    * . .
    . x .
    . . o
    
In addition, if some elements in the queue has
same cost, the queue sorts them according to the sort of
Queue.PriorityQueue in Python library.

In particular, the priority queue sorts elements in the queue
by the ascend order of number x if given element's costs are
all same. Also, it sorts them by the ascend order of number y
if given element's costs and number of x are all same.


Euclidean heuristic calculates costs with Euclidean distance.
For example, in the following state, the cost should be 10.

f(x) = h(x) + g(x)
     = sqrt(3^2+4^2) + sqrt(4^2+3^2)
     = 5 + 5
     = 10

    * . . . . . . . .
    . . . . . . . . .
    . . . . . . . . .
    . . . . o . . . .
    . . . . . . . . .
    . . . . . . . . .
    . . . . . . . . x

So, using these heuristics, this program shows how A* algorithm
works step by step.



How To Run
----------
1. Get python 2.6 or higher

2. Type following command in your terminal.

  $ python main.py [options]

Options are not needed to run the program. But,
if you want to specify input files, heuristic
function, or make program display much information,
the following options will be useful.

  -h, --help            show this help message and exit
  -f FILE, --file=FILE  choose a formatted text file for creating a maze. This
                        program uses 'mazes/sample' by default.
  -H HEURISTICS         choose a heuristic function for A* algorithm from
     			'zero', 'manhattan', 'euclidean' (or it's abbreviations:
			'z', 'm', and 'e'). This option sets'zero' by default.
  -v, --verbose         display information verbosely.
  -d, --diagonal        switch to the program that allows diagonal travel for
                        a cost of 3, and horizontal/vertical motion costs 2.
			    


Problem 2.1
-----------
On Church, you can see how A* algorithm run by typing
the following command. By default, the program uses
the Zero heuristic function.

  $ python ./main.py [-H (zero | manhattan | euclidean)]

For example, the following map should be workd as follows:

6 5
......
...*..
..##..
......
..o...

Zero:
21 16 22  .  .  .
17 12 18 23 19  .
13  8  #  # 14 20
 9  4  1  5 10 15
 6  2  0  3  7 11

- SHOTEST PATH:
 .  .  .  .  .  .
 .  x  x  *  .  .
 .  x  #  #  .  .
 .  x  x  .  .  .
 .  .  o  .  .  .

Manhattan:
 .  .  .  .  .  .
 .  6  7  8  .  .
 .  5  #  #  .  .
 .  4  1  2  .  .
 .  .  0  3  .  .

- SHOTEST PATH:
 .  .  .  .  .  .
 .  x  x  *  .  .
 .  x  #  #  .  .
 .  x  x  .  .  .
 .  .  o  .  .  .

Euclidean:
 .  .  .  .  .  .
 .  .  . 10  9  .
 .  5  #  #  7  .
 .  4  1  2  6  .
 .  8  0  3  .  .

- SHOTEST PATH:
 .  .  .  .  .  .
 .  .  .  *  x  .
 .  .  #  #  x  .
 .  .  x  x  x  .
 .  .  o  .  .  .	  

  

Problem 2.2
-----------
To illustrate interesting aspects between the heuristics,
I devised the two maps to compare, "ex-1" and "ex-2",
which are put in the "mazes" directory.

The "ex-1" is 3x3 and "ex-2" is 10x10 maze composed as follows:

3 3
*..
...
..o

10 10
*.........
..........
..........
..........
..........
..........
..........
..........
..........
.........o

Both maps are made by pure open spaces. The start location
is put on the most right bottom and finish location is put
on the most top left.

In "ex-1", although the exploring path is different between
heuristics, all the heuristics but Zero hueristic can explore
in most effective ways as follows:

Zero:
 8  6  3
 7  4  1
 5  2  0

Manhattan:
 4  .  .
 3  .  .
 2  1  0

Euclidean:
 4  .  .
 3  2  .
 .  1  0

Needless to say, Zero heuristic functions as
breadth-first search. So, for such maps, the
heuristic function has to seek all spaces in
the maze. Therefore, such maps are the most
ineffective ones for the heuristic function.

So, in this answer focuses on comparing two
the other heuristics: Manhattan and Euclidean.

In "ex-2", the Manhattan heuristics shows the
most effective exploring path, as shown in the
following map:

Zero:
99 97 94 90 85 79 72 64 55 45
98 95 91 86 80 73 65 56 46 36
96 92 87 81 74 66 57 47 37 28
93 88 82 75 67 58 48 38 29 21
89 83 76 68 59 49 39 30 22 15
84 77 69 60 50 40 31 23 16 10
78 70 61 51 41 32 24 17 11  6
71 62 52 42 33 25 18 12  7  3
63 53 43 34 26 19 13  8  4  1
54 44 35 27 20 14  9  5  2  0

Manhattan:
18  .  .  .  .  .  .  .  .  .
17  .  .  .  .  .  .  .  .  .
16  .  .  .  .  .  .  .  .  .
15  .  .  .  .  .  .  .  .  .
14  .  .  .  .  .  .  .  .  .
13  .  .  .  .  .  .  .  .  .
12  .  .  .  .  .  .  .  .  .
11  .  .  .  .  .  .  .  .  .
10  .  .  .  .  .  .  .  .  .
 9  8  7  6  5  4  3  2  1  0

However, as the following map shows, the euclidean
heuristic works not in effective; it takes 25 steps
to find shortest path, although the other found it
with 18 steps.

Euclidean:
25  .  .  .  .  .  .  .  .  .
24 21 22  .  .  .  .  .  .  .
 . 20 17 18  .  .  .  .  .  .
 .  . 16 13 14  .  .  .  .  .
 .  .  . 12 10 11  .  .  .  .
 .  .  .  .  9  8 15  .  .  .
 .  .  .  .  .  7  6 19  .  .
 .  .  .  .  .  .  5  4 23  .
 .  .  .  .  .  .  .  3  2  .
 .  .  .  .  .  .  .  .  1  0

The reason why Manhattan heuristics take 18 steps
is that, in A* algorithm, because there are no walls
in the maze and the start and finish location is put
symmetrically, the cost of each space is all same.

So, as described in the "Description", the Manhattan
heuristic follows the aspect of Queue.PriorityQueue
in Python library: compare XCoord if cost is same,
and compare YCoord if cost and XCoord are same.
And luckily, the finish location is put on the
most top left, so they did not spend waste steps at all.

On the other hand, in Euclidean heuristic, it seemed to
explore in effective up to 10 steps like "ex-1". However,
after that, it explored locations around the center rather
than the locations close to the finish. The reason is, as follows,
the Euclidean distance makes the cost higher near the finish
(A), and makes the cost relatively lower near the center(B).


(A) cost of x = 1 + sqrt(81+100)
    	      = 1 + sqrt(181)
	      -> 1 + 13.45 = 14.45
  0 1 2 3 4 5 6 7 8 9 10
0 * . . . . . . . . . .
1 x . . . . . . . . . .
2 . . . . . . . . . . .
3 . . . . . . . . . . .
4 . . . . . . . . . . .
5 . . . . . . . . . . .
6 . . . . . . . . . . .
7 . . . . . . . . . . .
8 . . . . . . . . . . .
9 . . . . . . . . . . .
10. . . . . . . . . . o


(B) cost of x = 5 + sqrt(49+36)
    	      = 5 + sqrt(85)
	      -> 5 + 9.22 = 14.22
  0 1 2 3 4 5 6 7 8 9 10
0 * . . . . . . . . . .
1 . . . . . . . . . . .
2 . . . . . . . . . . .
3 . . . . . . . . . . .
4 . . . . . . . . . . .
5 . . . . . . . . . . .
6 . . . . . . . x . . .
7 . . . . . . . . . . .
8 . . . . . . . . . . .
9 . . . . . . . . . . .
10. . . . . . . . . . o


As the costs above demonstrate, the location around
the center has relatively lower cost than near the
finish. Thereby, even though exploring locations
around the center seems to be waste, the Euclidean
hueristic explores them first.

Therefore, with the help of Queue.PriorityQueue
convention and cost calculations of Euclidean,
the interesting results between hueristics were
appeared when comparing "ex-1" and "ex-2".


Problem 2.3
-----------
To prove that the algorithm remains admissible,
I devised an example map, "ex-3". So, using the
example, I will demostrate how multiple valid
"finish" squares work.

First, the "ex-3" is a symmetric map with pure
open spaces as follows:

5 5
*...*
.....
.....
.....
..o..

With the Euclidean heuristic, the following
exploring path was obtained.

Explore Path:
 9  .  .  .  *
 8  4  .  7  .
 .  3  .  6  .
 .  2  1  5  .
 .  .  0  .  .

If there is only one goal at the top left,
5th step should be on (0,1), and then, the
program should find the goal as 6th step.

However, as the path illustrates, the program
shows that 5th step is (3,3). And then, it
finds (3,2) and (3,1) for the other goal.
The reason of this can be explained by the
following cost map (You can get the costs
by adding the '-v' or '--verbose' option).

4.47 5.12  .   5.12  .
4.60 4.57 5.23 4.57 4.60
4.82 4.47 4.82 4.47 4.82
5.23 4.57 4.60 4.57 5.23
 .   5.12  o   5.12  .

Assuming that the location closer to top left
should be chosen if costs are same due to
Queue.PriorityQueue convention, it is corrent
to reach the goal at the top left first. Also,
exploring (1,3), (1,2), and (1,1) is correct
because their costs are equal to or less than
the cost of (3.3).

Next, the program explores not (0,1) or (1,0)
but (3,3) because their node's costs are higher
than the cost of (3.3), 4.57. For same reasons,
it is also right to explore (3.2) and (3.1) because
the nodes then have lowest cost in the map.

Then, there are two nodes that have 4.60 cost
at (0,1) and (4,1). And due to the convention,
the (0,1) should be chosen. Finally, the goal
at the top left is found in this algorithm.

In conclusion, as I demonstrate above, the algorithm
remains admissible and the example map, "ex-3",
proves that it works correctly.


Problem 2.4
-----------
// What kind of map finds an incorrect shortest path
// under '-d' option???


Get Latest Code
---------------
If you would like to see/run the latest code,
type following command to clone it with Git.

  $ git clone git://github.com/yasulab/a-star-algorithm.git

Or, visit the following repository.

  https://github.com/yasulab/a-star-algorithm

To clone the code, you need to install Git.

   Git - Fast Version Control System
   http://git-scm.com/

